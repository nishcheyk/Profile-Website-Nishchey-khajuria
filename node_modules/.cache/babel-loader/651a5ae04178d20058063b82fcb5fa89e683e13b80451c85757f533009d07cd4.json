{"ast":null,"code":"var _jsxFileName = \"G:\\\\personalprofile\\\\Profile-Website-Nishchey\\\\src\\\\components\\\\Background.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { Points, PointMaterial, Preload } from \"@react-three/drei\";\nimport * as random from \"maath/random/dist/maath-random.esm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stars = props => {\n  _s();\n  const ref = useRef();\n  const [spheres, setSpheres] = useState(() => generateInitialSpheres());\n  function generateInitialSpheres() {\n    return [random.inSphere(new Float32Array(5000), {\n      radius: 1.2\n    }), random.inSphere(new Float32Array(5000), {\n      radius: 1.2\n    })];\n  }\n  useFrame((state, delta) => {\n    for (let i = 0; i < spheres.length; i++) {\n      const sphere = spheres[i];\n      for (let j = 0; j < sphere.length; j += 3) {\n        sphere[j + 2] -= delta / 11; // Move stars towards negative z-axis\n        if (sphere[j + 2] < -0.9) {\n          sphere[j + 2] = 0.4; // Reset position if star moves out of view\n        }\n      }\n    }\n    setSpheres([...spheres]); // Update state to trigger re-render\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    rotation: [0, 0, Math.PI / 4],\n    children: spheres.map((sphere, index) => /*#__PURE__*/_jsxDEV(Points, {\n      ref: ref,\n      positions: sphere,\n      stride: 3,\n      frustumCulled: true,\n      ...props,\n      children: /*#__PURE__*/_jsxDEV(PointMaterial, {\n        transparent: true,\n        color: \"#f272c8\",\n        size: 0.004,\n        sizeAttenuation: true,\n        depthWrite: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Stars, \"nIfxHRz2LbCkcWIKV84QH2tvE0E=\", false, function () {\n  return [useFrame];\n});\n_c = Stars;\nconst Background = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-auto absolute blur-[0.5px] inset-0 z-[-1]\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 1]\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stars, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preload, {\n        all: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Background;\nexport default Background;\nvar _c, _c2;\n$RefreshReg$(_c, \"Stars\");\n$RefreshReg$(_c2, \"Background\");","map":{"version":3,"names":["useState","useRef","Canvas","useFrame","Points","PointMaterial","Preload","random","jsxDEV","_jsxDEV","Stars","props","_s","ref","spheres","setSpheres","generateInitialSpheres","inSphere","Float32Array","radius","state","delta","i","length","sphere","j","rotation","Math","PI","children","map","index","positions","stride","frustumCulled","transparent","color","size","sizeAttenuation","depthWrite","fileName","_jsxFileName","lineNumber","columnNumber","_c","Background","className","camera","position","all","_c2","$RefreshReg$"],"sources":["G:/personalprofile/Profile-Website-Nishchey/src/components/Background.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport { Points, PointMaterial, Preload } from \"@react-three/drei\";\r\nimport * as random from \"maath/random/dist/maath-random.esm\";\r\n\r\nconst Stars = (props) => {\r\n  const ref = useRef();\r\n  const [spheres, setSpheres] = useState(() => generateInitialSpheres());\r\n\r\n  function generateInitialSpheres() {\r\n    return [\r\n      random.inSphere(new Float32Array(5000), { radius: 1.2 }),\r\n      random.inSphere(new Float32Array(5000), { radius: 1.2 }),\r\n    ];\r\n  }\r\n\r\n  useFrame((state, delta) => {\r\n    for (let i = 0; i < spheres.length; i++) {\r\n      const sphere = spheres[i];\r\n      for (let j = 0; j < sphere.length; j += 3) {\r\n        sphere[j + 2] -= delta / 11; // Move stars towards negative z-axis\r\n        if (sphere[j + 2] < -0.9) {\r\n          sphere[j + 2] = 0.4; // Reset position if star moves out of view\r\n        }\r\n      }\r\n    }\r\n    setSpheres([...spheres]); // Update state to trigger re-render\r\n  });\r\n\r\n  return (\r\n    <group rotation={[0, 0, Math.PI / 4]}>\r\n      {spheres.map((sphere, index) => (\r\n        <Points key={index} ref={ref} positions={sphere} stride={3} frustumCulled {...props}>\r\n          <PointMaterial\r\n            transparent\r\n            color='#f272c8'\r\n            size={0.004}\r\n            sizeAttenuation={true}\r\n            depthWrite={false}\r\n          />\r\n        </Points>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nconst Background = () => {\r\n  return (\r\n    <div className='w-full h-auto absolute blur-[0.5px] inset-0 z-[-1]'>\r\n      <Canvas camera={{ position: [0, 0, 1] }}>\r\n        <Stars />\r\n        <Preload all />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Background;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}